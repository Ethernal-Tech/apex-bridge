// Package cardano_api Code generated by swaggo/swag. DO NOT EDIT
package cardano_api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/CardanoTx/CreateBridgingTx": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Builds a bridging transaction with all required fees and metadata. The transaction must be signed and submitted separately.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CardanoTx"
                ],
                "summary": "Create a bridging transaction",
                "parameters": [
                    {
                        "description": "Bridging transaction data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateBridgingTxRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Returns the raw transaction data, transaction hash, and calculated bridging fees and amounts.",
                        "schema": {
                            "$ref": "#/definitions/response.BridgingTxResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request – Validation error due to input data not meeting required conditions.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/CardanoTx/GetBridgingTx": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the transaction and bridging fees that the sender must pay on the source chain. The bridging fee covers the cost for the fee payer to submit the transaction on the destination chain.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CardanoTx"
                ],
                "summary": "Get fees required for a bridging transaction",
                "parameters": [
                    {
                        "description": "Bridging transaction data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateBridgingTxRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Returns calculated fees.",
                        "schema": {
                            "$ref": "#/definitions/response.BridgingTxFeeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request – Validation error due to input data not meeting required conditions.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/CardanoTx/GetSettings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the participating chains with their specific settings, global bridge configuration (such as minimum and maximum allowed bridging amounts), and, for each source chain, the native token that will be received on the destination chain.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CardanoTx"
                ],
                "summary": "Get bridge settings",
                "responses": {
                    "200": {
                        "description": "OK - Returns the configuration settings.",
                        "schema": {
                            "$ref": "#/definitions/response.SettingsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.VCRunMode": {
            "type": "string",
            "enum": [
                "reactor",
                "skyline"
            ],
            "x-enum-varnames": [
                "ReactorMode",
                "SkylineMode"
            ]
        },
        "core.BridgingSettings": {
            "type": "object",
            "properties": {
                "maxAmountAllowedToBridge": {
                    "description": "Maximum amount of currency allowed to be bridged",
                    "type": "string"
                },
                "maxReceiversPerBridgingRequest": {
                    "description": "Maximum number of receivers allowed in a bridging request",
                    "type": "integer"
                },
                "maxTokenAmountAllowedToBridge": {
                    "description": "Maximum amount of native tokens allowed to be bridged",
                    "type": "string"
                },
                "minChainFeeForBridging": {
                    "description": "For each chain, the minimum fee required to cover the submission of the transaction on the destination chain",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "minOperationFee": {
                    "description": "For each chain, the minimum fee required to cover operational costs",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "minUtxoChainValue": {
                    "description": "For each chain, the minimum allowed UTXO value",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "minValueToBridge": {
                    "description": "Minimum value allowed to be bridged",
                    "type": "integer"
                }
            }
        },
        "request.CreateBridgingTxRequest": {
            "type": "object",
            "properties": {
                "bridgingFee": {
                    "description": "Fee covering the submission of the transaction on the destination chain, expressed in Lovelace",
                    "type": "integer"
                },
                "destinationChainId": {
                    "description": "Destination chain ID",
                    "type": "string"
                },
                "operationFee": {
                    "description": "Fee covering the operational cost of processing the bridging request, expressed in Lovelace",
                    "type": "integer"
                },
                "senderAddr": {
                    "description": "Address that initiates the bridging request on the source chain",
                    "type": "string"
                },
                "skipUtxos": {
                    "description": "Specifies the UTXO to skip during transaction creation on the source chain",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/request.UtxoRequest"
                    }
                },
                "sourceChainId": {
                    "description": "Source chain ID",
                    "type": "string"
                },
                "transactions": {
                    "description": "Array of transactions requested by the sender",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/request.CreateBridgingTxTransactionRequest"
                    }
                },
                "useFallback": {
                    "description": "Indicates if fallback mechanism should be used",
                    "type": "boolean"
                },
                "utxoCacheKey": {
                    "description": "Key used to enable caching of spent UTXOs",
                    "type": "string"
                }
            }
        },
        "request.CreateBridgingTxTransactionRequest": {
            "type": "object",
            "properties": {
                "addr": {
                    "description": "Receiver address",
                    "type": "string"
                },
                "amount": {
                    "description": "Amount to be bridged",
                    "type": "integer"
                },
                "isNativeToken": {
                    "description": "True if the amount is specified in a native token; false if in a regular currency on source chain",
                    "type": "boolean"
                }
            }
        },
        "request.UtxoRequest": {
            "type": "object",
            "properties": {
                "hash": {
                    "description": "Transaction hash",
                    "type": "string"
                },
                "index": {
                    "description": "Output index of UTXO",
                    "type": "integer"
                }
            }
        },
        "response.BridgingTxFeeResponse": {
            "type": "object",
            "properties": {
                "bridgingFee": {
                    "description": "Bridging fee for covering submission on the destination chain, expressed in Lovelace",
                    "type": "integer"
                },
                "fee": {
                    "description": "Transaction fee on the source chain, expressed in Lovelace",
                    "type": "integer"
                }
            }
        },
        "response.BridgingTxResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount of currency to be bridged, expressed in Lovelace",
                    "type": "integer"
                },
                "bridgingFee": {
                    "description": "Bridging fee for covering submission on the destination chain, expressed in Lovelace",
                    "type": "integer"
                },
                "nativeTokenAmount": {
                    "description": "Amount of native token to be bridged",
                    "type": "integer"
                },
                "txHash": {
                    "description": "Transaction hash",
                    "type": "string"
                },
                "txRaw": {
                    "description": "Raw transaction data, encoded as a hexadecimal string",
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "err": {
                    "type": "string"
                }
            }
        },
        "response.SettingsResponse": {
            "type": "object",
            "properties": {
                "bridgingSettings": {
                    "description": "Settings for bridge",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.BridgingSettings"
                        }
                    ]
                },
                "cardanoChainsNativeTokens": {
                    "description": "For each source chain, defines the native token that will be received on the destination chain",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/sendtx.TokenExchangeConfig"
                        }
                    }
                },
                "enabledChains": {
                    "description": "Participating chains in the bridge",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "runMode": {
                    "description": "Specifies the current operating mode of the application",
                    "allOf": [
                        {
                            "$ref": "#/definitions/common.VCRunMode"
                        }
                    ]
                }
            }
        },
        "sendtx.TokenExchangeConfig": {
            "type": "object",
            "properties": {
                "dstChainID": {
                    "type": "string"
                },
                "tokenName": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Cardano API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
