// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import "./console.sol";

/**
 * @title Storage
 * @dev Store & retrieve value in a variable
 * @custom:dev-run-script ./scripts/deploy_with_ethers.ts
 */
contract TestCustom {
    address public constant VALIDATOR_BLS_PRECOMPILE = 0x0000000000000000000000000000000000002060;
    uint256 public constant VALIDATOR_BLS_PRECOMPILE_GAS = 150000;

    event CustomResult(
        bool callSuccess,
        bool result
    );

    function valid() external {
        // verify signatures` for provided sig data and sigs bytes
        // solhint-disable-next-line avoid-low-level-calls
        // slither-disable-next-line low-level-calls,calls-loop
        (bool callSuccess, bytes memory returnData) = VALIDATOR_BLS_PRECOMPILE.call{
            gas: VALIDATOR_BLS_PRECOMPILE_GAS
        }(
            abi.encodePacked(
                uint8(1),
                //abi.encode(_hash, _signature, chainData, _bitmap)
                fromHex("00000000000000000000000000000000000000000000000000000000000000207070e731867758fd4bc0f5b5a02f9770bdbba33c89f3ef8d0cd48cc1979dee55000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000007d00000000000000000000000000000000000000000000000000000000000000401513c8babf4a67872c55be951674b1316dad46c05b80be85c21c8bd2d0615af1075b4687cf6c1144ab263ca180de12552642c8cd58b4316de4197a1c96a1eb4c00000000000000000000000000000000000000000000000000000000000000082b0fb73c1a4bfeebcc22e73af8b35486e5eba81f91cef825dac0e362a830f36a1d9a6af8fe6eff5f2b1666da498ceee2202e04aa5be60cf65b707b1e38bb54882d325ec11d9ebb9a091abec3e2cf4fadb31aaf590b79e8a4c19b2e19ae665058188b5d8c27721bc7cd2f7293cd19f05b0f6bf82544e288a37034502438cf53d517bd6e33205f6e5a04c502acb843666cb4c90e23cc77512ebf7643f71af524d72f2546f64e9f82b08f4d5c553bfb62e23d1a828469208369f5532f0d120dc6041c579b2ef108d832a6ef6c9bcd83f56555622f46d8d70c8c35a8f799eb1f83f7144bf076023bc748f14ecb4a47fc88930b5d94478db0915bfa26eb6baa5f391a24219b5a3f86b7c3546c4516067d1ade99eabc90c6e81445c0e19187318cba6f0522727540c1b15d612d396bf123145bddb5adbdb0b5cc2f05675d260f60131e16b53879b081654026edb4f0d01fb539a7a87f831975b275222bad13ce30f66620bd23e30c5610b50dfc01682d01cbdc1f7cbad53287acc8a8b6fc659a398e92047214f24fd38bd2dbed239584dc0ba4353f0347466aa3e005a6eb08ab80d3df1f03350b7f3f36620414e2f0bae0e6c6f81365fdf222eabf40ad67510f38d20d2a2188e18becdb89eb8514cd4ad5e8b72370c3a8337ef00d394708ceeac5af9729d2578a25cfaecdf89830d594d9278c893766c9de2d70c6b6b12f28f19e6f7f15f4cf4001c836a26014b52469df415033b333b4cd745396bca8e1420cce9c8f082e4e27c7afd0031bff22fa747f15adcaf4ee489971738725fdbf643a1f10e80c37f6f7152dac3bb8f0ccaf83fcfcb95f1e04334673df2cda2dd54dedae02092b7c78d5e28961f498df4795052ef8dd9c92e5d4c9a886fdb458e1c08b176ca80cb2400475514a5e3f0e62eead26dc2782a454b5b5461fa1101395a995d355df03d043c8333e9901fc1f5a9c08ae106e00865636da28d95725c5540e518018e122475385ddda933017b32b93c0fcad6b09bd2cdaebc5dcfe6357afb9a7554d5f22fddf7b8edd79a25fa40eb09c26179d0069fe72688791d656c45362427702401caf70cfe02f7811c348823bdfab733b7609d59efb7989ed71313b7ded7457190414b2f7b8609b30e4948948e62aa5a42bb03f5d48a38feb9706a65e114bbcde2713e9f167b7e241f49b74324525ba8628f36768e268beb0c5ed4a1ad0e5843b0d1d4a6f861a78784dbd453b3a9d2646ba517dc6f58da5d9bb0b4b89a7ca6c612ac866354171c067ad1d98d9e16e6f1ffb352129bd510d1b2deb7a8db20dfd990ec6780e0ccce27ea41dd5046892a3b823239019f6b080b51d4bea3bfcfc8b512c7a4b9b5a9bc4ebcbdcdc051a12b98d506e83a6b087424855271bd489003e0324e900db073499953557b0922879a2a87dcdc952f6bbdf16a1dc67874a730640")
            )
        );

        bool result = false;
        if (callSuccess) {  
            result = abi.decode(returnData, (bool));
        }
        
        emit CustomResult(callSuccess, result);
        console.log("Djura trikotaza laguna");
    }

    function invalid() external {
        // verify signatures` for provided sig data and sigs bytes
        // solhint-disable-next-line avoid-low-level-calls
        // slither-disable-next-line low-level-calls,calls-loop
        (bool callSuccess, bytes memory returnData) = VALIDATOR_BLS_PRECOMPILE.call{
            gas: VALIDATOR_BLS_PRECOMPILE_GAS
        }(
            abi.encodePacked(
                uint8(1),
                fromHex("00000000000000000000000000000000000000000000000000000000000000207070e731867758fd4bc0f5b5a02f9770bdbba33c89f3ef8d0cd48cc1979dee55000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000ef000000000000000000000000000000000000000000000000000000000000004024f7454e2b8c2c892e8e7ea860a6f8e3fe0e2449238d12e5c604ff211779494603ec3f27a4d4941a199280b1e69e2d778496f6b77d4ad68eef982cc1930ce1c300000000000000000000000000000000000000000000000000000000000000082d7179e148662532ede0d8a15847386e8a0818473e3138caf3456e0388ce5b871d28386293ccb2583b2f045ec0818f68eee92a3231beb7db44aad4ef3436d4d5106ff7701c2134a2e84f02f4e470ba3405896365fc8b94c42b9e3d6bf7287af20b41e46f2e1f8e4acf6d33634bf84f8b8b8c11dd820c37ab011ec1c67b3c9b2725e299aa23b9a99e183867cca1fc1c6159c0e6141f09752577261416992220fd012d06d74c8089761984ac775ad093450a2f506de9d6c886a778e7b56942203c16152472ff70f921fbdbae84bd1754fef9410911f2062e967f404d6363c0ade21da88ab6e9d2ef9d8919c70b06badae86de0af69db28c00bab04ec93024dde2026e5eebf655fb7f6f2851dee3966fe5817ef2ee45bf7db397e8d6a22224dd3000448212dcd7bd68b69d9a621c5f5500c20f439ecb8efaf8a2e83e3d1d18643d525760bad88bec39862cba0285ce0c16b5acf8935405efb27fd4d75ae3e1ba6e31eabccb42aae2903cb38bb661a4a363ae40ba49eda8ed4bc10c4c273a3eac4ab20987acc111497fecaf572c81ebf704537718a4b36f0e39b3a185bf4214433711fc1d25e5f53662e6b0332b43b3f02caafdb31b64faec0c292bb204ba36c6de02cfcf65aafca9fe27d0f830885fad6b32d7ab646a61a49944d10595a259a81b51888c4d4762f99f95aab14d0c6e72d85e64c97bcf53adbd750bceccc6893cba61c34c34a9ac9839e21f80ff2f40d0a66227f6e1280c00a910d0275235a6fdfe90ace48f02743064ad33f2786a9c0b576cec31df6dbddaea4085ad940dea6f6582c0c2b10be056b588e9d9b92271ec72d5dc5618bd1d894d91905443c9d6db02b2b1879e3b01c681466411945c99d528e44d6a14e24a765b4f2c0caded8a99bd21f639bcc202479d772be090988c328a78777c5f69f213227c72a10961c935dfa0298a9a4234f1a44144ae81afc773f3aecaa45089d82edf304cc8b6701af7eb91914ed24253fa0e3b3b3eec23de741312ba9ddc62ee92bf6805ca3f65ab289b820b8c638753cc965e6fe09fdbe80b8ff80e62efb7ff8e71ac35a5fcba5bf4e852b0c879661145561d996410da6004bda13b062a0d11809b99d9dcabab12a03ad1744b51870e4c4e0f51336eee5e3b8723e6377fc770b93881693b7f57026212c2606341cb8868a73a901b36f032f00e491fa19e105a44502dd3169cafa3417aa249f52ad964449b3ba68350f3e1dad7d573a2a3425416410be7e7713e8d91ee9158789d871d411205ac05f6b906ca28b6b0d7f4835224a6da82b1a0a5822414e233a216d90dbbcf1a4b7af323a9a037fa9f5922de87da438412104b666f0a9ae2e1f55803dc8f086be3d170e05d08b7e680ebbe3faf300d241c39fc7714713a72e8a8eacfe6f5aebcffdb06c704f8d6052218df0cd17080da075afa3e32adfa6")
            )
        );

        bool result = false;
        if (callSuccess) {  
            result = abi.decode(returnData, (bool));
        }
        
        emit CustomResult(callSuccess, result);
    }

    function noQuorum() external {
        // verify signatures` for provided sig data and sigs bytes
        // solhint-disable-next-line avoid-low-level-calls
        // slither-disable-next-line low-level-calls,calls-loop
        (bool callSuccess, bytes memory returnData) = VALIDATOR_BLS_PRECOMPILE.call{
            gas: VALIDATOR_BLS_PRECOMPILE_GAS
        }(
            abi.encodePacked(
                uint8(1),
                fromHex("00000000000000000000000000000000000000000000000000000000000000207070e731867758fd4bc0f5b5a02f9770bdbba33c89f3ef8d0cd48cc1979dee55000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000ea00000000000000000000000000000000000000000000000000000000000000400ad42a7c658be6baad956f770b5b753f26f56034f8c7c426c58d1cfb3c572f2f24d8060e43912cb22cd78505f964c3972e6bc3389685aa0784aa19b4a0bab16e00000000000000000000000000000000000000000000000000000000000000081786a58d0de5b025084507646ec4355a1af947329a3377183b59512992ced6bc1fa5404be3b953005a11f8286e6def671254088ec9014e621d2890b2b9c4dffd16e071b8f9beb47f8d070e8e04bfc60501c54566578176d7b673f2fdac561aa5229c80907b5924eb779b61b848e66834a09f23e307971ab872316f5104a093810114109c7a22754b15860095bad97df3b1d42250626828f828a1479e95742dca0ed1d236c06e8eaecd663cb03c361dc775a82859b00fcd0e8b4976c72abc78ec2edb81c41a0d23c164f80cdf63a97fa44725f244c0139df5aa12bd66f05127d704659878e8ffd3fe484545c9b9390e452f30de4aa49eb0a4b686c314b103deda12092711556f26c785a4b28bbb8f06d525b7ccd5b5a80bce914601e73e04c8ed22e544aadcfd714e021f98b4ccc82a0542a8286c3bd2b4174cccc55442a14954048265528e2f04dcf8fa255b9ab975936c950a103c87e687e5970aaa32ec3b96121db23c7d118868f16b033f4f5a32ac70d53c08282c37f2eb796ec54f683ae72a8befdb8311d221518ef0bfd2d234ec8b045ff48dcdc1dc42ee69975b5b27251231ef39b982ac92790a75846cd27c22778f764d25a732f70145d3989abbe2ff2bf2603bf44a2fb109dd5772434de7ef96d3269ab290a9a48dcbcb77b8ef217b2b4a90b019cc99a3ada252e39de91fc6930284050fc3993adb465dae564e5c5e00c5acde770662103c068370b69640e74d4f0aa33b9e478397280e5506727ddb02b8fd937387ba908f52ed77243b9270f5cc05dc674d2c46c3e309972145fb5b25126fd8d9416b80bfe6918b4ebe03bf50b7644e748c3c116c2821a9d7f1a3190dd3af3d5305b1b1455f11d3c7f2052b85d0817a846574e6f4294524bbcc8a721187469c32f85f61ebc07fa692c44966d1a05e35fcd7245f30cfeaef1caf54f112912dca0725b8453e0e74d564297a599fdb835264b1e0e382550792f27acb3117b2cb9672811091882932c1d5a32c69fdf8a6800cd3f8768f872875dd70f97616e1b1452bcd0d8a25e720104ebcb094ac2f3677c9e2213e594785d89e6c6b620dffc7fb3e3304a339e4f3832e9eaa29c64dca21881378d031108ed1b0fbe14d259e975eff96f035bb4ff841fdfb9ce56ed887a2dc272d76d412b3317fe781a52ebeddfb0ee34731fca87627c9d3263ef0e1d6ca6fe18bcea81d1219c82ce1980279b5c0577804a9fe3690f17655faeb5c28829fc1eb55832de475ea2dded6541e1179818bca5e24fbd94a4e3e5f60ddadeed492bae1e1942eafae9780d142b91e20f886c1e1de8c786ee9eabc74b2464693e8498ba661a805d8f2f50c6db0ec291bad8f80b803d73017c7ffa075fabd0e5e3c17b57e627b16217a94b7dda606214c83bc7e2e22f367764c85c963b1c5dc92a2df4724b588b7be2bdd6f762c4b")
            )
        );

        bool result = false;
        if (callSuccess) {  
            result = abi.decode(returnData, (bool));
        }
        
        emit CustomResult(callSuccess, result);
    }    

    // Convert an hexadecimal character to their value
    function fromHexChar(uint8 c) public pure returns (uint8) {
        if (bytes1(c) >= bytes1('0') && bytes1(c) <= bytes1('9')) {
            return c - uint8(bytes1('0'));
        }
        if (bytes1(c) >= bytes1('a') && bytes1(c) <= bytes1('f')) {
            return 10 + c - uint8(bytes1('a'));
        }
        if (bytes1(c) >= bytes1('A') && bytes1(c) <= bytes1('F')) {
            return 10 + c - uint8(bytes1('A'));
        }
        revert("fail");
    }

    // Convert an hexadecimal string to raw bytes
    function fromHex(string memory s) public pure returns (bytes memory) {
        bytes memory ss = bytes(s);
        require(ss.length%2 == 0); // length must be even
        bytes memory r = new bytes(ss.length/2);
        for (uint i=0; i<ss.length/2; ++i) {
            r[i] = bytes1(fromHexChar(uint8(ss[2*i])) * 16 +
                        fromHexChar(uint8(ss[2*i+1])));
        }
        return r;
    }
}