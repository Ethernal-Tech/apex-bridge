package ethtxhelper

import (
	"context"
	"encoding/hex"
	"math/big"
	"testing"
	"time"

	"github.com/Ethernal-Tech/apex-bridge/contractbinding"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/stretchr/testify/require"
)

const (
	mumbaiNodeUrl    = "https://polygon-mumbai-pokt.nodies.app"
	dummyMumbaiAccPk = "3761f6deeb2e0b2aa8b843e804d880afa6e5fecf1631f411e267641a72d0ca20"
)

var (
	scBytecode, _ = hex.DecodeString("608060405234801561001057600080fd5b50600436106100575760003560e01c8063209652551461005c578063433ce6661461007a5780635524107714610099578063af8c1b83146100b5578063d52c54c4146100d1575b600080fd5b610064610101565b6040516100719190611007565b60405180910390f35b61008261010a565b604051610090929190610fae565b60405180910390f35b6100b360048036038101906100ae9190610d89565b61022c565b005b6100cf60048036038101906100ca9190610d40565b610236565b005b6100eb60048036038101906100e69190610cf3565b6102b3565b6040516100f89190610fe5565b60405180910390f35b60008054905090565b600180600001805461011b90611161565b80601f016020809104026020016040519081016040528092919081815260200182805461014790611161565b80156101945780601f1061016957610100808354040283529160200191610194565b820191906000526020600020905b81548152906001019060200180831161017757829003601f168201915b5050505050908060010180546101a990611161565b80601f01602080910402602001604051908101604052809291908181526020018280546101d590611161565b80156102225780601f106101f757610100808354040283529160200191610222565b820191906000526020600020905b81548152906001019060200180831161020557829003601f168201915b5050505050905082565b8060008190555050565b80600160008201518160000190805190602001906102559291906108e5565b5060208201518160010190805190602001906102729291906108e5565b50604082015181600201908051906020019061028f92919061096b565b5060608201518160030190805190602001906102ac92919061096b565b5090505050565b6102bb6109cb565b6040516020016102ca90610f99565b6040516020818303038152906040528051906020012083836040516020016102f3929190610f80565b6040516020818303038152906040528051906020012014156105f957600160405180608001604052908160008201805461032c90611161565b80601f016020809104026020016040519081016040528092919081815260200182805461035890611161565b80156103a55780601f1061037a576101008083540402835291602001916103a5565b820191906000526020600020905b81548152906001019060200180831161038857829003601f168201915b505050505081526020016001820180546103be90611161565b80601f01602080910402602001604051908101604052809291908181526020018280546103ea90611161565b80156104375780601f1061040c57610100808354040283529160200191610437565b820191906000526020600020905b81548152906001019060200180831161041a57829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b8282101561051157838290600052602060002001805461048490611161565b80601f01602080910402602001604051908101604052809291908181526020018280546104b090611161565b80156104fd5780601f106104d2576101008083540402835291602001916104fd565b820191906000526020600020905b8154815290600101906020018083116104e057829003601f168201915b505050505081526020019060010190610465565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156105ea57838290600052602060002001805461055d90611161565b80601f016020809104026020016040519081016040528092919081815260200182805461058990611161565b80156105d65780601f106105ab576101008083540402835291602001916105d6565b820191906000526020600020905b8154815290600101906020018083116105b957829003601f168201915b50505050508152602001906001019061053e565b505050508152505090506108df565b600160405180608001604052908160008201805461061690611161565b80601f016020809104026020016040519081016040528092919081815260200182805461064290611161565b801561068f5780601f106106645761010080835404028352916020019161068f565b820191906000526020600020905b81548152906001019060200180831161067257829003601f168201915b505050505081526020016001820180546106a890611161565b80601f01602080910402602001604051908101604052809291908181526020018280546106d490611161565b80156107215780601f106106f657610100808354040283529160200191610721565b820191906000526020600020905b81548152906001019060200180831161070457829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156107fb57838290600052602060002001805461076e90611161565b80601f016020809104026020016040519081016040528092919081815260200182805461079a90611161565b80156107e75780601f106107bc576101008083540402835291602001916107e7565b820191906000526020600020905b8154815290600101906020018083116107ca57829003601f168201915b50505050508152602001906001019061074f565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156108d457838290600052602060002001805461084790611161565b80601f016020809104026020016040519081016040528092919081815260200182805461087390611161565b80156108c05780601f10610895576101008083540402835291602001916108c0565b820191906000526020600020905b8154815290600101906020018083116108a357829003601f168201915b505050505081526020019060010190610828565b505050508152505090505b92915050565b8280546108f190611161565b90600052602060002090601f016020900481019282610913576000855561095a565b82601f1061092c57805160ff191683800117855561095a565b8280016001018555821561095a579182015b8281111561095957825182559160200191906001019061093e565b5b50905061096791906109f3565b5090565b8280548282559060005260206000209081019282156109ba579160200282015b828111156109b95782518290805190602001906109a99291906108e5565b509160200191906001019061098b565b5b5090506109c79190610a10565b5090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b5b80821115610a0c5760008160009055506001016109f4565b5090565b5b80821115610a305760008181610a279190610a34565b50600101610a11565b5090565b508054610a4090611161565b6000825580601f10610a525750610a71565b601f016020900490600052602060002090810190610a7091906109f3565b5b50565b6000610a87610a8284611047565b611022565b90508083825260208201905082856020860282011115610aaa57610aa9611236565b5b60005b85811015610af857813567ffffffffffffffff811115610ad057610acf611227565b5b808601610add8982610bc8565b85526020850194506020840193505050600181019050610aad565b5050509392505050565b6000610b15610b1084611073565b611022565b905082815260208101848484011115610b3157610b3061123b565b5b610b3c84828561111f565b509392505050565b600082601f830112610b5957610b58611227565b5b8135610b69848260208601610a74565b91505092915050565b60008083601f840112610b8857610b87611227565b5b8235905067ffffffffffffffff811115610ba557610ba4611222565b5b602083019150836001820283011115610bc157610bc0611236565b5b9250929050565b600082601f830112610bdd57610bdc611227565b5b8135610bed848260208601610b02565b91505092915050565b600060808284031215610c0c57610c0b61122c565b5b610c166080611022565b9050600082013567ffffffffffffffff811115610c3657610c35611231565b5b610c4284828501610bc8565b600083015250602082013567ffffffffffffffff811115610c6657610c65611231565b5b610c7284828501610bc8565b602083015250604082013567ffffffffffffffff811115610c9657610c95611231565b5b610ca284828501610b44565b604083015250606082013567ffffffffffffffff811115610cc657610cc5611231565b5b610cd284828501610b44565b60608301525092915050565b600081359050610ced81611284565b92915050565b60008060208385031215610d0a57610d09611245565b5b600083013567ffffffffffffffff811115610d2857610d27611240565b5b610d3485828601610b72565b92509250509250929050565b600060208284031215610d5657610d55611245565b5b600082013567ffffffffffffffff811115610d7457610d73611240565b5b610d8084828501610bf6565b91505092915050565b600060208284031215610d9f57610d9e611245565b5b6000610dad84828501610cde565b91505092915050565b6000610dc28383610e64565b905092915050565b6000610dd5826110b4565b610ddf81856110d7565b935083602082028501610df1856110a4565b8060005b85811015610e2d5784840389528151610e0e8582610db6565b9450610e19836110ca565b925060208a01995050600181019050610df5565b50829750879550505050505092915050565b6000610e4b838561110a565b9350610e5883858461111f565b82840190509392505050565b6000610e6f826110bf565b610e7981856110e8565b9350610e8981856020860161112e565b610e928161124a565b840191505092915050565b6000610ea8826110bf565b610eb281856110f9565b9350610ec281856020860161112e565b610ecb8161124a565b840191505092915050565b6000610ee360058361110a565b9150610eee8261125b565b600582019050919050565b60006080830160008301518482036000860152610f168282610e64565b91505060208301518482036020860152610f308282610e64565b91505060408301518482036040860152610f4a8282610dca565b91505060608301518482036060860152610f648282610dca565b9150508091505092915050565b610f7a81611115565b82525050565b6000610f8d828486610e3f565b91508190509392505050565b6000610fa482610ed6565b9150819050919050565b60006040820190508181036000830152610fc88185610e9d565b90508181036020830152610fdc8184610e9d565b90509392505050565b60006020820190508181036000830152610fff8184610ef9565b905092915050565b600060208201905061101c6000830184610f71565b92915050565b600061102c61103d565b90506110388282611193565b919050565b6000604051905090565b600067ffffffffffffffff821115611062576110616111f3565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561108e5761108d6111f3565b5b6110978261124a565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561114c578082015181840152602081019050611131565b8381111561115b576000848401525b50505050565b6000600282049050600182168061117957607f821691505b6020821081141561118d5761118c6111c4565b5b50919050565b61119c8261124a565b810181811067ffffffffffffffff821117156111bb576111ba6111f3565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f7072696d65000000000000000000000000000000000000000000000000000000600082015250565b61128d81611115565b811461129857600080fd5b5056fea26469706673582212208692002124e322d116d21c20405580b53cad54a1464dffcf91a3f7dac5c0dc6664736f6c63430008070033")
)

func TestTxHelper(t *testing.T) {
	scAddress := "0xF146ba6fAF3741df932a5d4074f414A15a621797"

	wallet, err := NewEthTxWallet(dummyMumbaiAccPk)
	require.NoError(t, err)

	txHelper, err := NewEThTxHelper(WithNodeUrl(mumbaiNodeUrl))
	require.NoError(t, err)

	ctx, cancelCtx := context.WithTimeout(context.Background(), time.Second*60)
	defer cancelCtx()

	t.Run("deploy smart contract", func(t *testing.T) {
		abiData, err := contractbinding.TestContractMetaData.GetAbi()
		require.NoError(t, err)

		nonce, err := txHelper.GetNonce(ctx, wallet.GetAddressHex(), false)
		require.NoError(t, err)

		addr, hash, err := txHelper.Deploy(ctx, new(big.Int).SetUint64(nonce),
			uint64(300000), false, *abiData, scBytecode, wallet)
		require.NoError(t, err)
		require.NotEqual(t, common.Address{}, addr)

		receipt, err := txHelper.WaitForReceipt(ctx, hash, true)
		require.NoError(t, err)
		require.Equal(t, types.ReceiptStatusSuccessful, receipt.Status)
		require.Equal(t, common.HexToAddress(addr), receipt.ContractAddress)

		scAddress = addr
	})

	t.Run("sending smart contract transaction and query smart contract", func(t *testing.T) {
		valueToSet := uint64(time.Now().UTC().UnixNano())

		contract, err := contractbinding.NewTestContract(common.HexToAddress(scAddress), txHelper.GetClient())
		require.NoError(t, err)

		res, err := contract.GetValue(&bind.CallOpts{
			Context: ctx,
			From:    wallet.GetAddress(),
		})
		require.NoError(t, err)
		require.False(t, new(big.Int).SetUint64(valueToSet).Cmp(res) == 0)

		// first call is just for creating tx
		tx, err := txHelper.SendTx(ctx, wallet, bind.TransactOpts{}, true, func(txOpts *bind.TransactOpts) (*types.Transaction, error) {
			return contract.SetValue(txOpts, new(big.Int).SetUint64(valueToSet))
		})
		require.NoError(t, err)

		receipt, err := txHelper.WaitForReceipt(ctx, tx.Hash().String(), true)
		require.NoError(t, err)
		require.Equal(t, types.ReceiptStatusSuccessful, receipt.Status)

		// check value again
		res, err = contract.GetValue(&bind.CallOpts{
			Context: ctx,
			From:    wallet.GetAddress(),
		})
		require.NoError(t, err)
		require.True(t, new(big.Int).SetUint64(valueToSet).Cmp(res) == 0)
	})

	t.Run("send transfer transaction legacy", func(t *testing.T) {
		const (
			ethAddr  = "0xBa65B75FDA35561626A455b1aF806A7C58A57DdE"
			ethValue = uint64(2001)
		)

		client, ok := txHelper.GetClient().(*ethclient.Client)
		require.True(t, ok)

		chainID, err := client.ChainID(ctx)
		require.NoError(t, err)

		oldVal, err := client.BalanceAt(ctx, common.HexToAddress(ethAddr), nil)
		require.NoError(t, err)

		// first call is just for creating tx
		txOpts := bind.TransactOpts{
			Value:    new(big.Int).SetUint64(ethValue),
			GasLimit: 21000, // default value for transfer
		}

		err = txHelper.PopulateTxOpts(ctx, wallet.GetAddressHex(), false, &txOpts)
		require.NoError(t, err)

		tx := TxOpts2LegacyTx(ethAddr, []byte{}, &txOpts)

		signedTx, err := wallet.SignTx(chainID, tx)
		require.NoError(t, err)

		err = client.SendTransaction(ctx, signedTx)
		require.NoError(t, err)

		receipt, err := txHelper.WaitForReceipt(ctx, signedTx.Hash().String(), true)
		require.NoError(t, err)
		require.Equal(t, types.ReceiptStatusSuccessful, receipt.Status)

		// check value again
		newVal, err := client.BalanceAt(ctx, common.HexToAddress(ethAddr), nil)
		require.NoError(t, err)

		desiredVal := new(big.Int).Add(new(big.Int).SetUint64(ethValue), oldVal)
		require.True(t, desiredVal.Cmp(newVal) == 0)
	})

	t.Run("send transfer transaction dynamicfee", func(t *testing.T) {
		const (
			ethAddr  = "0xBa65B75FDA35561626A455b1aF806A7C58A57DdE"
			ethValue = uint64(2001)
		)

		client, ok := txHelper.GetClient().(*ethclient.Client)
		require.True(t, ok)

		chainID, err := client.ChainID(ctx)
		require.NoError(t, err)

		oldVal, err := client.BalanceAt(ctx, common.HexToAddress(ethAddr), nil)
		require.NoError(t, err)

		// first call is just for creating tx
		txOpts := bind.TransactOpts{
			Value:    new(big.Int).SetUint64(ethValue),
			GasLimit: 21000, // default value for transfer
		}

		err = txHelper.PopulateTxOpts(ctx, wallet.GetAddressHex(), true, &txOpts)
		require.NoError(t, err)

		tx := TxOpts2DynamicFeeTx(ethAddr, chainID, []byte{}, &txOpts)

		signedTx, err := wallet.SignTx(chainID, tx)
		require.NoError(t, err)

		err = client.SendTransaction(ctx, signedTx)
		require.NoError(t, err)

		receipt, err := txHelper.WaitForReceipt(ctx, signedTx.Hash().String(), true)
		require.NoError(t, err)
		require.Equal(t, types.ReceiptStatusSuccessful, receipt.Status)

		// check value again
		newVal, err := client.BalanceAt(ctx, common.HexToAddress(ethAddr), nil)
		require.NoError(t, err)

		desiredVal := new(big.Int).Add(new(big.Int).SetUint64(ethValue), oldVal)
		require.True(t, desiredVal.Cmp(newVal) == 0)
	})
}
