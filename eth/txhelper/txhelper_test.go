package ethtxhelper

import (
	"context"
	"encoding/hex"
	"math/big"
	"testing"
	"time"

	"github.com/Ethernal-Tech/apex-bridge/contractbinding"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/stretchr/testify/require"
)

const (
	mumbaiNodeUrl    = "https://polygon-mumbai-pokt.nodies.app"
	dummyMumbaiAccPk = "3761f6deeb2e0b2aa8b843e804d880afa6e5fecf1631f411e267641a72d0ca20"
)

var (
	scBytecode, _ = hex.DecodeString("608060405234801561001057600080fd5b50600436106100575760003560e01c8063209652551461005c578063433ce6661461007a5780635524107714610099578063af8c1b83146100b5578063bf90aa19146100d1575b600080fd5b6100646100ef565b6040516100719190610b9a565b60405180910390f35b6100826100f8565b604051610090929190610b41565b60405180910390f35b6100b360048036038101906100ae9190610992565b61021a565b005b6100cf60048036038101906100ca9190610949565b610224565b005b6100d96102a1565b6040516100e69190610b78565b60405180910390f35b60008054905090565b600180600001805461010990610ce9565b80601f016020809104026020016040519081016040528092919081815260200182805461013590610ce9565b80156101825780601f1061015757610100808354040283529160200191610182565b820191906000526020600020905b81548152906001019060200180831161016557829003601f168201915b50505050509080600101805461019790610ce9565b80601f01602080910402602001604051908101604052809291908181526020018280546101c390610ce9565b80156102105780601f106101e557610100808354040283529160200191610210565b820191906000526020600020905b8154815290600101906020018083116101f357829003601f168201915b5050505050905082565b8060008190555050565b8060016000820151816000019080519060200190610243929190610591565b506020820151816001019080519060200190610260929190610591565b50604082015181600201908051906020019061027d929190610617565b50606082015181600301908051906020019061029a929190610617565b5090505050565b6102a9610677565b60016040518060800160405290816000820180546102c690610ce9565b80601f01602080910402602001604051908101604052809291908181526020018280546102f290610ce9565b801561033f5780601f106103145761010080835404028352916020019161033f565b820191906000526020600020905b81548152906001019060200180831161032257829003601f168201915b5050505050815260200160018201805461035890610ce9565b80601f016020809104026020016040519081016040528092919081815260200182805461038490610ce9565b80156103d15780601f106103a6576101008083540402835291602001916103d1565b820191906000526020600020905b8154815290600101906020018083116103b457829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156104ab57838290600052602060002001805461041e90610ce9565b80601f016020809104026020016040519081016040528092919081815260200182805461044a90610ce9565b80156104975780601f1061046c57610100808354040283529160200191610497565b820191906000526020600020905b81548152906001019060200180831161047a57829003601f168201915b5050505050815260200190600101906103ff565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156105845783829060005260206000200180546104f790610ce9565b80601f016020809104026020016040519081016040528092919081815260200182805461052390610ce9565b80156105705780601f1061054557610100808354040283529160200191610570565b820191906000526020600020905b81548152906001019060200180831161055357829003601f168201915b5050505050815260200190600101906104d8565b5050505081525050905090565b82805461059d90610ce9565b90600052602060002090601f0160209004810192826105bf5760008555610606565b82601f106105d857805160ff1916838001178555610606565b82800160010185558215610606579182015b828111156106055782518255916020019190600101906105ea565b5b509050610613919061069f565b5090565b828054828255906000526020600020908101928215610666579160200282015b82811115610665578251829080519060200190610655929190610591565b5091602001919060010190610637565b5b50905061067391906106bc565b5090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b5b808211156106b85760008160009055506001016106a0565b5090565b5b808211156106dc57600081816106d391906106e0565b506001016106bd565b5090565b5080546106ec90610ce9565b6000825580601f106106fe575061071d565b601f01602090049060005260206000209081019061071c919061069f565b5b50565b600061073361072e84610bda565b610bb5565b9050808382526020820190508285602086028201111561075657610755610db9565b5b60005b858110156107a457813567ffffffffffffffff81111561077c5761077b610daa565b5b808601610789898261081e565b85526020850194506020840193505050600181019050610759565b5050509392505050565b60006107c16107bc84610c06565b610bb5565b9050828152602081018484840111156107dd576107dc610dbe565b5b6107e8848285610ca7565b509392505050565b600082601f83011261080557610804610daa565b5b8135610815848260208601610720565b91505092915050565b600082601f83011261083357610832610daa565b5b81356108438482602086016107ae565b91505092915050565b60006080828403121561086257610861610daf565b5b61086c6080610bb5565b9050600082013567ffffffffffffffff81111561088c5761088b610db4565b5b6108988482850161081e565b600083015250602082013567ffffffffffffffff8111156108bc576108bb610db4565b5b6108c88482850161081e565b602083015250604082013567ffffffffffffffff8111156108ec576108eb610db4565b5b6108f8848285016107f0565b604083015250606082013567ffffffffffffffff81111561091c5761091b610db4565b5b610928848285016107f0565b60608301525092915050565b60008135905061094381610dde565b92915050565b60006020828403121561095f5761095e610dc8565b5b600082013567ffffffffffffffff81111561097d5761097c610dc3565b5b6109898482850161084c565b91505092915050565b6000602082840312156109a8576109a7610dc8565b5b60006109b684828501610934565b91505092915050565b60006109cb8383610a48565b905092915050565b60006109de82610c47565b6109e88185610c6a565b9350836020820285016109fa85610c37565b8060005b85811015610a365784840389528151610a1785826109bf565b9450610a2283610c5d565b925060208a019950506001810190506109fe565b50829750879550505050505092915050565b6000610a5382610c52565b610a5d8185610c7b565b9350610a6d818560208601610cb6565b610a7681610dcd565b840191505092915050565b6000610a8c82610c52565b610a968185610c8c565b9350610aa6818560208601610cb6565b610aaf81610dcd565b840191505092915050565b60006080830160008301518482036000860152610ad78282610a48565b91505060208301518482036020860152610af18282610a48565b91505060408301518482036040860152610b0b82826109d3565b91505060608301518482036060860152610b2582826109d3565b9150508091505092915050565b610b3b81610c9d565b82525050565b60006040820190508181036000830152610b5b8185610a81565b90508181036020830152610b6f8184610a81565b90509392505050565b60006020820190508181036000830152610b928184610aba565b905092915050565b6000602082019050610baf6000830184610b32565b92915050565b6000610bbf610bd0565b9050610bcb8282610d1b565b919050565b6000604051905090565b600067ffffffffffffffff821115610bf557610bf4610d7b565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610c2157610c20610d7b565b5b610c2a82610dcd565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610cd4578082015181840152602081019050610cb9565b83811115610ce3576000848401525b50505050565b60006002820490506001821680610d0157607f821691505b60208210811415610d1557610d14610d4c565b5b50919050565b610d2482610dcd565b810181811067ffffffffffffffff82111715610d4357610d42610d7b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610de781610c9d565b8114610df257600080fd5b5056fea2646970667358221220d567f19c32c3ab899fdefdabc89303f711b19d299f507e9280ad206d759662a264736f6c63430008070033")
)

func TestTxHelper(t *testing.T) {
	scAddress := "0x55d7056e2230db95a0979569D87558Cf6c618969"

	wallet, err := NewEthTxWallet(dummyMumbaiAccPk)
	require.NoError(t, err)

	txHelper, err := NewEThTxHelper(WithNodeUrl(mumbaiNodeUrl))
	require.NoError(t, err)

	ctx, cancelCtx := context.WithTimeout(context.Background(), time.Second*60)
	defer cancelCtx()

	t.Run("deploy smart contract", func(t *testing.T) {
		abiData, err := contractbinding.TestContractMetaData.GetAbi()
		require.NoError(t, err)

		nonce, err := txHelper.GetNonce(ctx, wallet.GetAddressHex(), false)
		require.NoError(t, err)

		addr, hash, err := txHelper.Deploy(ctx, new(big.Int).SetUint64(nonce),
			uint64(300000), false, *abiData, scBytecode, wallet)
		require.NoError(t, err)
		require.NotEqual(t, common.Address{}, addr)

		receipt, err := txHelper.WaitForReceipt(ctx, hash, true)
		require.NoError(t, err)
		require.Equal(t, types.ReceiptStatusSuccessful, receipt.Status)
		require.Equal(t, common.HexToAddress(addr), receipt.ContractAddress)

		scAddress = addr
	})

	t.Run("sending smart contract transaction and query smart contract", func(t *testing.T) {
		valueToSet := uint64(time.Now().UTC().UnixNano())

		contract, err := contractbinding.NewTestContract(common.HexToAddress(scAddress), txHelper.GetClient())
		require.NoError(t, err)

		res, err := contract.GetValue(&bind.CallOpts{
			Context: ctx,
			From:    wallet.GetAddress(),
		})
		require.NoError(t, err)
		require.False(t, new(big.Int).SetUint64(valueToSet).Cmp(res) == 0)

		// first call is just for creating tx
		tx, err := txHelper.SendTx(ctx, wallet, bind.TransactOpts{}, true, func(txOpts *bind.TransactOpts) (*types.Transaction, error) {
			return contract.SetValue(txOpts, new(big.Int).SetUint64(valueToSet))
		})
		require.NoError(t, err)

		receipt, err := txHelper.WaitForReceipt(ctx, tx.Hash().String(), true)
		require.NoError(t, err)
		require.Equal(t, types.ReceiptStatusSuccessful, receipt.Status)

		// check value again
		res, err = contract.GetValue(&bind.CallOpts{
			Context: ctx,
			From:    wallet.GetAddress(),
		})
		require.NoError(t, err)
		require.True(t, new(big.Int).SetUint64(valueToSet).Cmp(res) == 0)
	})

	t.Run("send transfer transaction legacy", func(t *testing.T) {
		const (
			ethAddr  = "0xBa65B75FDA35561626A455b1aF806A7C58A57DdE"
			ethValue = uint64(2001)
		)

		client, ok := txHelper.GetClient().(*ethclient.Client)
		require.True(t, ok)

		chainID, err := client.ChainID(ctx)
		require.NoError(t, err)

		oldVal, err := client.BalanceAt(ctx, common.HexToAddress(ethAddr), nil)
		require.NoError(t, err)

		// first call is just for creating tx
		txOpts := bind.TransactOpts{
			Value:    new(big.Int).SetUint64(ethValue),
			GasLimit: 21000, // default value for transfer
		}

		err = txHelper.PopulateTxOpts(ctx, wallet.GetAddressHex(), false, &txOpts)
		require.NoError(t, err)

		tx := TxOpts2LegacyTx(ethAddr, []byte{}, &txOpts)

		signedTx, err := wallet.SignTx(chainID, tx)
		require.NoError(t, err)

		err = client.SendTransaction(ctx, signedTx)
		require.NoError(t, err)

		receipt, err := txHelper.WaitForReceipt(ctx, signedTx.Hash().String(), true)
		require.NoError(t, err)
		require.Equal(t, types.ReceiptStatusSuccessful, receipt.Status)

		// check value again
		newVal, err := client.BalanceAt(ctx, common.HexToAddress(ethAddr), nil)
		require.NoError(t, err)

		desiredVal := new(big.Int).Add(new(big.Int).SetUint64(ethValue), oldVal)
		require.True(t, desiredVal.Cmp(newVal) == 0)
	})

	t.Run("send transfer transaction dynamicfee", func(t *testing.T) {
		const (
			ethAddr  = "0xBa65B75FDA35561626A455b1aF806A7C58A57DdE"
			ethValue = uint64(2001)
		)

		client, ok := txHelper.GetClient().(*ethclient.Client)
		require.True(t, ok)

		chainID, err := client.ChainID(ctx)
		require.NoError(t, err)

		oldVal, err := client.BalanceAt(ctx, common.HexToAddress(ethAddr), nil)
		require.NoError(t, err)

		// first call is just for creating tx
		txOpts := bind.TransactOpts{
			Value:    new(big.Int).SetUint64(ethValue),
			GasLimit: 21000, // default value for transfer
		}

		err = txHelper.PopulateTxOpts(ctx, wallet.GetAddressHex(), true, &txOpts)
		require.NoError(t, err)

		tx := TxOpts2DynamicFeeTx(ethAddr, chainID, []byte{}, &txOpts)

		signedTx, err := wallet.SignTx(chainID, tx)
		require.NoError(t, err)

		err = client.SendTransaction(ctx, signedTx)
		require.NoError(t, err)

		receipt, err := txHelper.WaitForReceipt(ctx, signedTx.Hash().String(), true)
		require.NoError(t, err)
		require.Equal(t, types.ReceiptStatusSuccessful, receipt.Status)

		// check value again
		newVal, err := client.BalanceAt(ctx, common.HexToAddress(ethAddr), nil)
		require.NoError(t, err)

		desiredVal := new(big.Int).Add(new(big.Int).SetUint64(ethValue), oldVal)
		require.True(t, desiredVal.Cmp(newVal) == 0)
	})
}
