// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/BridgingRequestState/Get": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the current status of a bridging request, along with the destination chain ID and transaction hash, based on the given source chain ID and transaction hash.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BridgingRequestState"
                ],
                "summary": "Get state of bridging request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source chain ID",
                        "name": "chainId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Source transaction hash",
                        "name": "txHash",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.BridgingRequestStateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request – One or more query parameters are missing, or the bridging request state could not be retrieved.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - No bridging request found for the given parameters.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/BridgingRequestState/GetMultiple": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns statuses and related data for one or more bridging requests, based on the given source chain ID and transaction hash(es).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BridgingRequestState"
                ],
                "summary": "Get states of multiple bridging requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source chain ID",
                        "name": "chainId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Source transaction hashes",
                        "name": "txHash",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK – Returns a map with source transaction hashes as keys and the associated bridging request data as values.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/response.BridgingRequestStateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request – chainId is missing from the query or the bridging request states could not be retrieved.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/OracleState/Get": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all unspent transaction outputs of bridging addresses for the given chain ID. Each UTXO includes the address it belongs to, along with amount and other relevant data.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OracleState"
                ],
                "summary": "Get unspent transaction outputs of bridging addresses on specific chain",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chain ID",
                        "name": "chainId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.OracleStateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request – chainId is missing from the query or invalid, or the transaction outputs could not be retrieved.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/OracleState/GetHasTxFailed": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns whether the transaction failed. A transaction is considered failed if it is not found on Oracle and if its TTL has expired.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OracleState"
                ],
                "summary": "Get transaction failure status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source chain ID",
                        "name": "chainId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Source transaction hash",
                        "name": "txHash",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transaction TTL",
                        "name": "ttl",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.HasTxFailedResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request – One or more query parameters are missing or invalid, or the transaction could not be retrieved.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/Settings/Get": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns configuration settings for the bridge, including global parameters such as minimum and maximum bridging amounts, as well as any per-chain specific settings.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Get bridge settings for all supported chains",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.SettingsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "core.BridgingRequestStatus": {
            "type": "string",
            "enum": [
                "DiscoveredOnSource",
                "InvalidRequest",
                "SubmittedToBridge",
                "IncludedInBatch",
                "SubmittedToDestination",
                "FailedToExecuteOnDestination",
                "ExecutedOnDestination"
            ],
            "x-enum-varnames": [
                "BridgingRequestStatusDiscoveredOnSource",
                "BridgingRequestStatusInvalidRequest",
                "BridgingRequestStatusSubmittedToBridge",
                "BridgingRequestStatusIncludedInBatch",
                "BridgingRequestStatusSubmittedToDestination",
                "BridgingRequestStatusFailedToExecuteOnDestination",
                "BridgingRequestStatusExecutedOnDestination"
            ]
        },
        "core.CardanoChainConfigUtxo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "amount": {
                    "type": "integer"
                },
                "id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "index": {
                    "type": "integer"
                },
                "slot": {
                    "type": "integer"
                },
                "tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/wallet.TokenAmount"
                    }
                }
            }
        },
        "response.BridgingRequestStateResponse": {
            "type": "object",
            "properties": {
                "destinationChainId": {
                    "type": "string"
                },
                "destinationTxHash": {
                    "type": "string"
                },
                "sourceChainId": {
                    "type": "string"
                },
                "sourceTxHash": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/core.BridgingRequestStatus"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "err": {
                    "type": "string"
                }
            }
        },
        "response.HasTxFailedResponse": {
            "type": "object",
            "properties": {
                "failed": {
                    "type": "boolean"
                }
            }
        },
        "response.OracleStateResponse": {
            "type": "object",
            "properties": {
                "chainID": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "slot": {
                    "type": "integer"
                },
                "utxos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.CardanoChainConfigUtxo"
                    }
                }
            }
        },
        "response.SettingsResponse": {
            "type": "object",
            "properties": {
                "maxAmountAllowedToBridge": {
                    "type": "string"
                },
                "maxReceiversPerBridgingRequest": {
                    "type": "integer"
                },
                "minChainFeeForBridging": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "minOperationFee": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "minUtxoChainValue": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "minValueToBridge": {
                    "type": "integer"
                }
            }
        },
        "wallet.TokenAmount": {
            "type": "object",
            "properties": {
                "nam": {
                    "description": "name must plain name and not be hex encoded",
                    "type": "string"
                },
                "pid": {
                    "type": "string"
                },
                "val": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Oracle API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
